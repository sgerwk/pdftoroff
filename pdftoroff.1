.TH pdftoroff 1 "September 12, 2017"
.
.
.
.SH NAME
pdftoroff - convert pdf to various text formats (roff, html, TeX, text)
.
.
.
.SH SYNOPSIS
\fBpdftoroff\fP
[\fI-r\fP|\fI-w\fP|\fI-p\fP|\fI-f\fP|\fI-t\fP|\fI-s fmt\fP]
\fIfile.pdf\fP
.
.
.
.SH DESCRIPTION

Extract text from a pdf file undoing page, column and paragraph formatting if
possible but retaining italic and bold faces. The output can be in one of the
following formats: groff(1), html, plain TeX, text with font changes, simple
text or a user-given format.

The groff output can be used to reformat the text to a smaller page size and a
different font to make it more readable on a small tablet or e-ink reader,
as shown in the REFORMAT section.
.
.
.
.SH OPTIONS
.TP
.B
-r
output in groff(1) format; it can be directly compiled by a pipe like
\fIpdftoroff -r file.pdf | groff -Dutf8 -Tutf8 -\fP or prepended by code for
page and character formatting, like in the REFORMAT section, below

.TP
.B
-w
output in html format; only the body of the html file is generated, not the
header

.TP
.B
-p
convert to plain TeX; see BUGS below

.TP
.B
-f
text format; font changes are marked \fI\\[fontname]\fP, and backslashes
escaped to \fI\\\\\fP

.TP
.B
-t
text only

.TP
\fB-s\fP \fIfmt\fP
output using the parameters in \fIfmt\fP
see OUTPUT FORMAT, below

.SH REFORMAT

The following code re-formats a pdf file for a 200x250 page with 5pt margins
and Helvetica font, so that it reads better to a small tablet or e-ink reader.
It extracts the text from the pdf file, prepends it with some groff(7) page and
font code and then compiles back to pdf.

.nf
.ft I
{
cat <<!
\[char46]device papersize=200p,250p
\[char46]po 5p
\[char46]ll 190p
\[char46]pl 240p
\[char46]fam H
!
pdftoroff -r file.pdf;
} | \\
groff -Dutf8 -Tpdf - > new.pdf
.ft P
.fi

.
.
.
.SH OUPUT FORMAT

The text from the pdf file is scanned for font changes and paragraph breaks.
Short lines, indents and vertical spaces are taken as the start of a new
paragraph, otherwise the new line is considered the continuation of the
previous. Font names are matched agains "Italic" and "Bold", which indicate the
begin of an italic or bold face, and their lack as the end of the font face.

The various output formats are obtained by adding the appropriate strings at
paragraph breaks and font changes, and by substituting some characters (for
example, a plain \fI<\fP is replaced by \fI&lt;\fP for the html format).

The \fI-s fmt\fP option allows arbitrary output strings. For example, the html
format can be alternatively generated by the command:

.nf
\fI
pdftoroff -s '
<p>,</p>
,,,,,,<i>,</i>,<b>,</b>,true,\\,.,&lt;,&gt;,&amp;' file.pdf
\fP
.fi

The format string is a comma-separated list of the following fields. Some may
be empty and some may contain newlines.

.TP
.I
parstart
the string printed when a paragraph begins
.TP
.I
parend
the string printed when a paragraph ends
.TP
.I
fontname
the \fIprintf(3)\fP format for printing the font name;
for example, the \fI-f\fP option uses \fI\\\\[%s]\fP, so that when the text
begins using the font TimesNewRomanCM this is marked
\fI\\[TimesNewRomanCM]\fP in the output
.TP
.I
plain
printed when the font changes to non-italic and non-bold
.br
(example: \fI\\fR\fP in roff)
.TP
.I
italic
printed when the font changes to italic but not bold
.br
(example: \fI\\fI\fP in roff)
.TP
.I
bold
printed when the font changes to bold but not italic
.br
(example: \fI\\fB\fP in roff)
.TP
.I
bolditalic
printed when the font changes to both italic and bold
.br
(example: \fI\\f[BI]\fP in roff)
.TP
.I
italicbegin
printed when the text begins using an italic font
.br
(example: \fI<i>\fP in html)
.TP
.I
italicend
printed when the text ends using an italic font
.br
(example: \fI</i>\fP in html)
.TP
.I
boldbegin
printed when the text begins using a bold font
.br
(example: \fI<b>\fP in html)
.TP
.I
boldend
printed when the text ends using a bold font
.br
(example: \fI</b>\fP in html)
.TP
.I
reset
if this is \fItrue\fP,
turn off all active font faces when a paragraph ends and restore them when the
new one starts; for example, if the pdf starts using a bold font and then ends
it after two paragraphs, the html output is \fI<p><b>first paragraph</b></p>
<p><b>second</b></p>\fP
.TP
.I
backslash
replace every backslash with this string
.TP
.I
firstdot
replace a dot at the start of a line with this string
(this is only useful for roff output)
.TP
.I
less
replace the minus sign (\fI<\fP) with this
.TP
.I
greater
replace the greater sign (\fI>\fP) with this
.TP
.I
and
replace the ampersand (\fI&\fP) with this
.
.
.
.SH BUGS

Replacements are limited to some fixed characters (\\, ., <, > and &). Instead,
the \fI-s\fP option should support replacing arbitrary characters (say,
\fI@\fP).

The plain TeX conversion is primitive: it does not convert accented characters
as it should; it does not support fonts that are both bold and italic; it does
not finish with \fI\\end\fP (but the latter is coherent with generating only
the body of the text in the other formats).

A command line option should allow specifying a number of boxes so that text is
extracted from them in order rather than from the whole page. This is because
the method used by pdftoroff to detect the start of a new column does not
always work. Such an option would also allow to discard headers and footer. As
an example, \fI-b box1,box2,box3;box4;box5;2*\fP would extract text from
\fIbox1,box2,box3\fP from the first page, from \fIbox4\fP from the second, from
\fIbox5\fP from the third, and the repeat with \fIbox4\fP and \fIbox5\fP until
the end of the document.

The html ouput is not always correct. If the document starts with an italic
font, then switches to italic and bold and then to bold only, the resulting
code is \fI<i>...<b>....</i>...</b>\fP, which is not nested correctly. The
right code would be \fI<i>...<b>....</b></i><b>...</b>\fP. Two solutions are
possible:

.IP "  * " 4
turn off all faces before starting a new one
.IP "  * "
remember which of italic and bold was started first

.P
The numeric parameters for detecting the start of a new paragraph or column are
fixed (the \fIstruct measure\fP in the code). They should be changeable by
command line options.

.SH SEE ALSO
pdftotext(1), pdftohtml(1), poppler (https://poppler.freedesktop.org/)

